server:
  port: 8080
  servlet:
    context-path: /
    encoding:
      charset: UTF-8
      enabled: true
      force: true
#  ssl:
#    key-store: C:\Users\cnhhw\Desktop\aws\key-pair\keystore_test.p12
#    key-store-type: PKCS12
#    key-store-password: 12345678
#    key-alias: key_test

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://springboot-service.c94eywaw89pq.ap-northeast-2.rds.amazonaws.com:3306/mydb?serverTimezone=UTC&characterEncoding=UTF-8

    #jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Seoul
    #jdbc:mysql://springboot-service.c94eywaw89pq.ap-northeast-2.rds.amazonaws.com:3306/mydb?serverTimezone=UTC&characterEncoding=UTF-8
    username: root
    password: ewqdsa1927
    # cos cos1234
    #root ewqdsa1927

  jpa:
    hibernate:
      ddl-auto: create #create update none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    show-sql: true

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: 445166056653-d8gheha870eva0g6u3e5u6p7fnhmhicc.apps.googleusercontent.com
            client-secret: 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
            scope:
              - profile
              - email
              - https://www.googleapis.com/auth/gmail.modify


          naver:
            client-id: pfMXjhym1EE0McgR_NLa
            client-secret: ixnSi6BggF
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            scope:
              - name
              - email
              - profile_image

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

            # 회원정보를 json으로 받는데 response라는 키값으로 네이버가 리턴해줌
  #profiles:
 #   include:
#      - oauth2



jwt:
  secretKey: bXktc2VjdXJpdHktZnVja2luZy1wcm9qZWN0LWZpbGVzLXNlY3JldC1rZXktbGl0dGxlLWJpdAo

  access:
    expiration: 3600000
    header: Authorization

  refresh:
    expiration: 1209600000 #  (1000L(ms -> s) * 60L(s -> m) * 60L(m -> h) * 24L(h -> 하루) * 14(2주))
    header: Authorization-refresh


logging:
  level:
    org.hibernate.SQL: debug

